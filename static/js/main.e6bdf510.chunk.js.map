{"version":3,"sources":["serviceWorker.js","Component/card.js","Component/cardList.js","Component/searchBox.js","Component/scroll.js","Component/errorBoundary.js","Container/app.js","actions.js","constants.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","cardArray","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","e","target","value","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","debounce","connect","searchRobots","searchFeild","requestRobots","dispatch","text","payload","setSearchFeild","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e6bdf510.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n// this destructuring from props\r\n//i.e const {id,name,email} = props;\r\nconst Card =({id,name,email})=>{\r\n    return (\r\n        <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\r\n            <div>            \r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst CardList = ({robots}) =>{\r\n    \r\n    const cardArray = robots.map(user=>{\r\n        return <Card key={user.id} id={user.id} name={user.name} email={user.email}/>\r\n    });\r\n    return (\r\n        <section>\r\n          {cardArray}\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return(\r\n        <input \r\n        className='tc pa3 ba b--green bg-lightest-blue'\r\n        type=\"search\" \r\n        placeholder='search robots'\r\n        onChange={e=>searchChange(e.target.value)}\r\n        // onChange={e=>searchChange(e)}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll',border:'5px solid black',height:'70vh'}}>\r\n        {props.children}\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor (props){\r\n        super(props);\r\n\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>Opps, something went wrong</h1>\r\n\r\n        }else{\r\n            return this.props.children;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React,{Component} from 'react';\r\nimport {connect} from  'react-redux';\r\nimport CardList from '../Component/cardList';\r\nimport SearchBox from '../Component/searchBox';\r\nimport Scroll from '../Component/scroll';\r\nimport './app.css';\r\nimport {debounce} from 'lodash';\r\nimport ErrorBoundary from '../Component/errorBoundary';\r\nimport {setSearchFeild,requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state =>{\r\n    // return{searchField: state.searchRobots.searchFeild}\r\n    // useful when we have more reducers\r\n    return{\r\n        searchField: state.searchRobots.searchFeild,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    //todo- change the event.target.value to text\r\n    return {\r\n        onSearchChange: (text) => dispatch(setSearchFeild(text)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n    // return {onSearchChange: (event) => dispatch(setSearchFeild(event.target.value))}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n    const {searchField,onSearchChange,robots,isPending} = this.props;\r\n    const filteredRobots=\r\n        robots\r\n        .filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n    if (isPending){\r\n        return (<h1>Loading...</h1>)\r\n    }else{\r\n        return (\r\n            <div className='tc'>\r\n            <h1 className='f1 navy' >RoboFriends</h1>\r\n            {/* <SearchBox searchChange={this.debounceEvent(this.onSearchChange,500)}/> */}\r\n            <SearchBox searchChange={\r\n                debounce(onSearchChange,500)                \r\n                }/>\r\n            {/* <SearchBox searchChange={onSearchChange}/> */}\r\n            <Scroll>\r\n            <ErrorBoundary>\r\n                <CardList robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n\r\n    }\r\n        \r\n}\r\n}\r\n\r\n//connect is a higher order components\r\n// like a curry operation\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCHFEILD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED} from './constants'\r\n\r\nexport const setSearchFeild =(text)=>{  \r\n    return {\r\n    type: CHANGE_SEARCHFEILD,\r\n    payload: text,\r\n}}\r\n\r\n//this is a higher order function & redux-thunk know this return a function\r\nexport const requestRobots= ()=> (dispatch) =>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data =>dispatch({\r\n        type:REQUEST_ROBOTS_SUCCESS,\r\n        payload:data\r\n    }))\r\n    .catch(error=>dispatch({\r\n        type:REQUEST_ROBOTS_FAILED,\r\n        payload:error\r\n    }))\r\n\r\n}","export const CHANGE_SEARCHFEILD = 'CHANGE_SEARCHFEILD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCHFEILD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED} from './constants'\r\n\r\nconst initialStateSearch ={\r\n    searchFeild:''\r\n}\r\n\r\nexport const searchRobots =\r\n    (state = initialStateSearch,action={})=> { \r\n        switch(action.type){\r\n            case CHANGE_SEARCHFEILD:\r\n                //update state with new value for text\r\n                return {...state,searchFeild:action.payload};\r\n            default:\r\n                return state;\r\n        }\r\n\r\n}\r\n\r\nconst initialStateRobots ={\r\n    isPending:false,\r\n    robots: [],\r\n    error:''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return{...state,isPending:true};\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state,isPending:false, robots:action.payload};\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state,isPending:false, robots:action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport {logger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Container/app';\nimport {searchRobots,requestRobots} from './reducer';\n\n//we can create a single root by merging all reducers\nconst rootReducer = combineReducers(\n  {searchRobots,requestRobots}\n)\nconst store \n= createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\n\nReactDOM.render(\n  <React.StrictMode>\n  {/* Storing redux store as Prop */}\n  {/* <App store={store}/> */}\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}